doctype html
html
	link(rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Open+Sans:400,600|Source+Code+Pro")
	meta(name='description', content='The Lokalise API 2.0 allows you to manipulate contents of your projects, manage contributors, create translation tasks and much more.')
	meta(charset='UTF-8')
	title='Lokalise API 2.0 documentation'
	style(type='text/css').
		!{css}
		!{customCSS}
body
	include ./mixins
	.documentation
		- var intro = output.content && output.content[0]
		.sidebar
			.custom-header
				| !{headerContent}
			nav.sidebar-nav
				if (intro && intro.description && intro.description.text)
					if intro.description.links && intro.description.links.length
						ul
							li.resource-header
								a.resource-nav-item(href='#' + intro.id, _href='#' + intro.id) #{capitalize(intro.title)}
							each link in intro.description.links
								li.resource-header
									a.resource-nav-item(href=link, _href=link) #{capitalize(link.substring(1))}

				each group in output.content[0].content
					if group.type === 'resourceGroup'
						.group-header
							span #{group.title}
						ul
							each resource in group.content
								li.resource-header
									a.resource-nav-item(href='#' + resource.id, _href='#' + resource.id) #{resource.title}
									ul
										each transition in resource.content
											if (transition.type === 'transition')
												li.transition
													a.child-nav-item(href='#' + transition.id, _href='#' + transition.id)
														span.child-nav-text #{transition.title}
											else if (transition.type === 'dataStructure')
												li.transition
													a.child-nav-item(href="#" + transition.id, _href="#" + transition.id)
														span.child-nav-text #{transition.title}
		.container
			.doc-body.col-12
				nav#sdk-links
					a(class='sdk-link', href='https://github.com/lokalise/php-lokalise-api', target='_new') PHP
					a(class='sdk-link', href='https://github.com/lokalise/ruby-lokalise-api', target='_new') Ruby
					a(class='sdk-link', href='https://github.com/lokalise/node-lokalise-api', target='_new') Node.js
					a(class='sdk-link', href='https://github.com/lokalise/go-lokalise-api', target='_new') Golang
				- var intro = output.content && output.content[0]
				each group in output.content[0].content
					if group.type === 'resourceGroup'
						each resource in group.content
							.row.way-point(id=resource.id)
								.col-6.lhs
									.resource-heading #{resource.title}
									if resource.description && resource.description.text
										.description !{resource.description.text}
								.col-6.rhs
							each transition in resource.content
								if (transition.type === 'transition')
									.row.way-point(id=transition.id)
										.col-6.lhs
											.transition-heading #{transition.title}
											if transition.description && transition.description.text
												.description !{transition.description.text}
											if transition.xhrContent.urlParameters && transition.xhrContent.urlParameters.length
												h5.part-heading Url Parameters
												+renderUrlParameters(transition.xhrContent.urlParameters)
											if transition.xhrContent.attributes && transition.xhrContent.attributes.length
												h5.part-heading Attributes
												- var attrs = Array.isArray(transition.xhrContent.attributes) ? transition.xhrContent.attributes[0] : transition.xhrContent.attributes;
												+renderAttributes(attrs, dataStructures)
										.col-6.rhs
											.api-definition
												.api-definition-heading.rhs-heading Definition
												.api-definition-description.rhs-highlight.code
													if transition.xhrContent.method
														span.api-method(class=transition.xhrContent.method.toLowerCase()) #{transition.xhrContent.method}
													span.api-url  !{transition.xhrContent.originalUrl.replaceAll('{', '<mark>{').replaceAll('}', '}</mark>')}

											- var transactions = transition.content && transition.content[0] && transition.content[0].content;
											each transaction, index in transactions
													if transaction.type === 'httpRequest'
														- var body = transaction.content && transaction.content[0];
														if body && body.type === 'body'
															.sample-request-body.rhs-heading Example request body
															if(body.content.isJSON())
																.sample-request-body-description.rhs-highlight.code !{JSON.stringify(JSON.parse(body.content), 0, 2)}
															else
																.sample-request-body-description.rhs-highlight.code !{body.content}
											.sample-request
												.rhs-heading Example request
												if lang && transition.snippets && transition.snippets[lang]
													.sample-request-description.rhs-highlight.code 
														| !{transition.snippets[lang].replaceAll('\\\n', '\\\<br>')}
												else
													.sample-request-description.rhs-highlight.code !{transition.snippet.replaceAll('\\\n', '\\\<br>')}
											.sample-response
												each blocks in transition.content
													- var transactions = blocks && blocks.content;
													each transaction, index in transactions
														if transaction.type === 'httpResponse'
															- var body = transaction.content && transaction.content[0];
															- var header = transaction.props && transaction.props.headers[1]
															if body || header
																.sample-response-body.rhs-heading Example response (!{transaction.props.statusCode})
															if header
																.sample-response-body.rhs-heading Headers
															if header
																if !body
																	.sample-response-body-description.rhs-highlight.code !{header.key.content}: !{header.value.content}
																else
																	.sample-response-body-description.rhs-highlight-headers.code !{header.key.content}: !{header.value.content}
															if body && body.type === 'body'
																if header
																	.sample-response-body.rhs-heading Body
																if(body.content.isJSON())
																	.sample-response-body-description.rhs-highlight.code !{JSON.stringify(JSON.parse(body.content), 0, 2)}
																else
																	.sample-response-body-description.rhs-highlight.code !{body.content}

								else if (transition.type === 'dataStructure')
									.row.way-point(id=transition.id)
										.col-6.lhs
											.transition-heading #{transition.title}
											h5.part-heading Attributes
											+renderAttributes(transition.content[0], dataStructures)
		script(src='https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/noframework.waypoints.min.js')
		script.
			// polyfill for closest()
			if (!Element.prototype.matches) {
				Element.prototype.matches =
						Element.prototype.msMatchesSelector ||
						Element.prototype.webkitMatchesSelector;
			}

			if (!Element.prototype.closest) {
				Element.prototype.closest = function (s) {
					var el = this;

					do {
						if (Element.prototype.matches.call(el, s)) return el;
						el = el.parentElement || el.parentNode;
					} while (el !== null && el.nodeType === 1);
					return null;
				};
			}
			// end of polyfill for closest()
			var initialHash = window.location.hash;
			var docbody = document.querySelector('.doc-body');
			docbody.addEventListener('click', function(e) {
				if (e.target.classList.contains('expand') || e.target.classList.contains('close')) {
					var childAttr = e.target.parentNode.parentNode;
					childAttr.classList.toggle('show');
				}
			});

			var firstSectionChangedLoading = false
			function selectSection(elementHash) {
				var urlHash = window.location.hash;
				var hash = elementHash

				if(!firstSectionChangedLoading && hash !== urlHash) {
					firstSectionChangedLoading = true
					window.location.hash = ''
				} else if ((urlHash && hash !== urlHash)) {
					hash = urlHash
				}

				var navAnchor = document.querySelector('.sidebar a[_href=\"' + hash + '\"]');

				if (!navAnchor) {
					return
				}

				var closestAnchorWrapper = navAnchor.closest('.resource-header')
				var prevSelectedItem = document.querySelector('.child-nav-item.selected');
				var prevSelectedItemContainer = document.querySelector('.resource-header.expand');

				prevSelectedItem && prevSelectedItem.classList.remove('selected');
				prevSelectedItemContainer && prevSelectedItemContainer.classList.remove('expand')

				if(navAnchor.classList.contains('child-nav-item')) {
					navAnchor.classList.add('selected')
					closestAnchorWrapper.classList.add('expand')
				} else if(navAnchor.classList.contains('resource-nav-item')) {
					closestAnchorWrapper.classList.add('expand')
				}

			}

			if (initialHash) {
				var container = document.querySelector('.container')
				var content = container.querySelector(initialHash)
				container.scrollTop = content.offsetTop

				selectSection(initialHash)
			}

			function debounce(func, wait, immediate) {
				var timeout;
				return function () {
					var context = this, args = arguments;
					var later = function () {
						timeout = null;
						if (!immediate) func.apply(context, args);
					};
					var callNow = immediate && !timeout;
					clearTimeout(timeout);
					timeout = setTimeout(later, wait);
					if (callNow) func.apply(context, args);
				};
			};

			var wayHandler = debounce(function() {
				if (this.element.classList.contains('header-anchor')) {
					this.element = this.element.parentNode;
				};

				var elementHash = '#' + this.element.id;
				selectSection(elementHash)
			}, 0, true)

			var container = document.querySelector('.container');
			var waypoints = document.querySelectorAll('.way-point');

			for(var i = 0;i < waypoints.length; i++) {
				new Waypoint({
					continuous: false,
					context: container,
					element: waypoints[i],
					handler: wayHandler,
					offset: 10
				});
			}

			// SDK links container align
			var refElem = document.querySelector('.doc-body');
			var targetElem = document.getElementById('sdk-links');
			var fnAlignSdkLinksWidth = function () {
				targetElem.style.width = refElem.offsetWidth / 2 + "px";
				targetElem.style.right = (window.innerWidth - refElem.getBoundingClientRect().right).toString() + "px"; // Constant scrollbar fix
			};
			document.addEventListener("DOMContentLoaded", fnAlignSdkLinksWidth);
			window.addEventListener("resize", fnAlignSdkLinksWidth);
